import ast
import dataclasses
import typing

from odd.ast_utils import ASTNodePosition, get_model_name

from ._base import Artifact
from .addon import AddonPath


@dataclasses.dataclass
class PythonModule(AddonPath):
    node: ast.Module


@dataclasses.dataclass
class ModelDefinition(AddonPath):
    node: ast.ClassDef
    class_name: str
    params: typing.Dict[str, typing.Any] = dataclasses.field(default_factory=dict)

    @property
    def name(self) -> typing.Optional[str]:
        return get_model_name(self.params)

    @property
    def position(self) -> ASTNodePosition:
        return ASTNodePosition.from_node(self.node)


@dataclasses.dataclass
class FieldDefinition(Artifact):
    node: ast.Call
    name: str
    class_name: str
    model: ModelDefinition

    @property
    def position(self) -> ASTNodePosition:
        return ASTNodePosition.from_node(self.node)


@dataclasses.dataclass
class ModelMethod(Artifact):
    node: ast.FunctionDef
    model: ModelDefinition

    @property
    def name(self) -> str:
        return self.node.name

    @property
    def position(self) -> ASTNodePosition:
        return ASTNodePosition.from_node(self.node)
