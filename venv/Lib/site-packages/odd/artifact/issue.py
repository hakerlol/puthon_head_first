import dataclasses
import enum
import pathlib
import typing

from ._base import Artifact
from .addon import Addon


@enum.unique
class Severity(enum.IntEnum):
    # This is for cases where it is difficult to objectively show if fixing an
    # issue would have positive effect on the code.
    INFO = 100

    # This is the default case.
    NORMAL = 200

    # This is reserved for issues where it can be shown that failing to fix an
    # issue might result in a crash, addon failing to install/update,
    # perceptible performance decrease, potential loss of data, security
    # vulnerability, etc.
    MAJOR = 300


@enum.unique
class Confidence(enum.IntEnum):
    # If it can be shown that a plugin can emit a false positive, then issues emitted
    # from that particular analysis path **must** have LOW confidence.
    LOW = 3

    # This is the default case.
    MEDIUM = 5

    # We are confident that the issue is not a false positive.
    HIGH = 10


class Position(typing.NamedTuple):
    line: typing.Optional[int]
    column: typing.Optional[int] = None


@dataclasses.dataclass
class Location:
    path: pathlib.Path
    position: typing.Optional[Position] = None


@dataclasses.dataclass
class Issue(Artifact):
    slug: str
    description: str
    addon: Addon
    locations: typing.List[Location] = dataclasses.field(default_factory=list)
    severity: Severity = Severity.NORMAL
    confidence: Confidence = Confidence.MEDIUM
    categories: typing.List[str] = dataclasses.field(default_factory=list)
    sources: typing.List[str] = dataclasses.field(default_factory=list)
