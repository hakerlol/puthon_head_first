import collections
import logging
import pathlib
import typing

from odd.artifact import Addon
from odd.const import DEFAULT_MAX_LEVELS_UP, MANIFEST_FILENAMES

_LOG = logging.getLogger(__name__)


def find_manifest(
    path: pathlib.Path,
    *,
    manifest_filenames: typing.Collection[str] = MANIFEST_FILENAMES,
    max_up_levels: int = DEFAULT_MAX_LEVELS_UP,
) -> typing.Optional[pathlib.Path]:
    if path.is_dir():
        for fn in manifest_filenames:
            if (path / fn).is_file():
                return path / fn
    elif path.is_file():
        current_dir_path = path.parent
        for _ in range(max_up_levels + 1):
            manifest_path = find_manifest(current_dir_path)
            if manifest_path:
                return manifest_path
            # Try to go one level up.
            next_dir_path = current_dir_path.parent
            # We have reached "/", stop.
            if next_dir_path == current_dir_path:
                break
            else:
                current_dir_path = next_dir_path

        _LOG.warning(
            "Could not find an addon manifest for file: %s after going %d "
            "directory levels up",
            path,
            max_up_levels,
        )
    return None


def discover_addons(
    path: pathlib.Path,
    odoo_version: int,
    *,
    allow_duplicates: bool = False,
    allow_not_installable: bool = True,
) -> typing.Iterator[Addon]:
    """
    :param allow_duplicates: If False, addons with the same name are ignored.
    :param allow_not_installable: If False, addons that are marked as not
        installable are ignored.
    """
    paths: typing.Deque[pathlib.Path] = collections.deque()
    seen: typing.Set[str] = set()

    def check_path(
        path: pathlib.Path, *, descend: bool = True
    ) -> typing.Iterator[Addon]:
        manifest_path = find_manifest(path)
        if manifest_path:
            addon_name = manifest_path.parent.name
            if allow_duplicates or addon_name not in seen:
                addon = Addon.from_manifest_path(manifest_path, odoo_version)
                if allow_not_installable or addon.manifest.get("installable", True):
                    yield addon
            if not allow_duplicates:
                if addon_name in seen:
                    _LOG.warning(
                        'Addon with the same name "%s" found at path: %s, '
                        "it will be ignored",
                        addon_name,
                        path,
                    )
                else:
                    seen.add(addon_name)
        else:
            if descend:
                paths.append(path)

    if not path.exists():
        raise FileNotFoundError(f"File/directory {path!s} does not exist")

    # If it is a directory, trigger traversal.
    if path.is_dir():
        paths.append(path)

    yield from check_path(path, descend=False)
    while paths:
        for child in paths.popleft().iterdir():
            if child.is_dir():
                yield from check_path(child)
